/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { NetworkManagementClient } from "@azure/arm-network";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a peering in the specified virtual network.
 *
 * @summary Creates or updates a peering in the specified virtual network.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkPeeringCreate.json
 */
function createPeering() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "peerTest";
        const virtualNetworkName = "vnet1";
        const virtualNetworkPeeringName = "peer";
        const virtualNetworkPeeringParameters = {
            allowForwardedTraffic: true,
            allowGatewayTransit: false,
            allowVirtualNetworkAccess: true,
            remoteVirtualNetwork: {
                id: "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
            },
            useRemoteGateways: false
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworkPeerings.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a peering in the specified virtual network.
 *
 * @summary Creates or updates a peering in the specified virtual network.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkPeeringCreateWithRemoteVirtualNetworkEncryption.json
 */
function createPeeringWithRemoteVirtualNetworkEncryption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "peerTest";
        const virtualNetworkName = "vnet1";
        const virtualNetworkPeeringName = "peer";
        const virtualNetworkPeeringParameters = {
            allowForwardedTraffic: true,
            allowGatewayTransit: false,
            allowVirtualNetworkAccess: true,
            remoteVirtualNetwork: {
                id: "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
            },
            useRemoteGateways: false
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworkPeerings.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a peering in the specified virtual network.
 *
 * @summary Creates or updates a peering in the specified virtual network.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkPeeringSync.json
 */
function syncPeering() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "peerTest";
        const virtualNetworkName = "vnet1";
        const virtualNetworkPeeringName = "peer";
        const syncRemoteAddressSpace = "true";
        const virtualNetworkPeeringParameters = {
            allowForwardedTraffic: true,
            allowGatewayTransit: false,
            allowVirtualNetworkAccess: true,
            remoteVirtualNetwork: {
                id: "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
            },
            useRemoteGateways: false
        };
        const options = {
            syncRemoteAddressSpace
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworkPeerings.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters, options);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createPeering();
        createPeeringWithRemoteVirtualNetworkEncryption();
        syncPeering();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualNetworkPeeringsCreateOrUpdateSample.js.map