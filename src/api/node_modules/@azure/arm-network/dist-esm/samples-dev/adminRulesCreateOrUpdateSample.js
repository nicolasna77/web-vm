/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { NetworkManagementClient } from "@azure/arm-network";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates an admin rule.
 *
 * @summary Creates or updates an admin rule.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/NetworkManagerDefaultAdminRulePut.json
 */
function createADefaultAdminRule() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const networkManagerName = "testNetworkManager";
        const configurationName = "myTestSecurityConfig";
        const ruleCollectionName = "testRuleCollection";
        const ruleName = "SampleDefaultAdminRule";
        const adminRule = {
            flag: "AllowVnetInbound",
            kind: "Default"
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.adminRules.createOrUpdate(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName, adminRule);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an admin rule.
 *
 * @summary Creates or updates an admin rule.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/NetworkManagerAdminRulePut.json
 */
function createAnAdminRule() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const networkManagerName = "testNetworkManager";
        const configurationName = "myTestSecurityConfig";
        const ruleCollectionName = "testRuleCollection";
        const ruleName = "SampleAdminRule";
        const adminRule = {
            description: "This is Sample Admin Rule",
            access: "Deny",
            destinationPortRanges: ["22"],
            destinations: [{ addressPrefix: "*", addressPrefixType: "IPPrefix" }],
            direction: "Inbound",
            kind: "Custom",
            priority: 1,
            sourcePortRanges: ["0-65535"],
            sources: [{ addressPrefix: "Internet", addressPrefixType: "ServiceTag" }],
            protocol: "Tcp"
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.adminRules.createOrUpdate(resourceGroupName, networkManagerName, configurationName, ruleCollectionName, ruleName, adminRule);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createADefaultAdminRule();
        createAnAdminRule();
    });
}
main().catch(console.error);
//# sourceMappingURL=adminRulesCreateOrUpdateSample.js.map