/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { NetworkManagementClient } from "@azure/arm-network";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreate.json
 */
function createVirtualNetwork() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const virtualNetworkName = "test-vnet";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            flowTimeoutInMinutes: 10,
            location: "eastus"
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateWithBgpCommunities.json
 */
function createVirtualNetworkWithBgpCommunities() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const virtualNetworkName = "test-vnet";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            bgpCommunities: { virtualNetworkCommunity: "12076:20000" },
            location: "eastus",
            subnets: [{ name: "test-1", addressPrefix: "10.0.0.0/24" }]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateSubnetWithDelegation.json
 */
function createVirtualNetworkWithDelegatedSubnets() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const virtualNetworkName = "test-vnet";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            location: "westcentralus",
            subnets: [
                {
                    name: "test-1",
                    addressPrefix: "10.0.0.0/24",
                    delegations: [
                        {
                            name: "myDelegation",
                            serviceName: "Microsoft.Sql/managedInstances"
                        }
                    ]
                }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateWithEncryption.json
 */
function createVirtualNetworkWithEncryption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const virtualNetworkName = "test-vnet";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            encryption: { enabled: true, enforcement: "AllowUnencrypted" },
            location: "eastus",
            subnets: [{ name: "test-1", addressPrefix: "10.0.0.0/24" }]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateServiceEndpoints.json
 */
function createVirtualNetworkWithServiceEndpoints() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "vnetTest";
        const virtualNetworkName = "vnet1";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            location: "eastus",
            subnets: [
                {
                    name: "test-1",
                    addressPrefix: "10.0.0.0/16",
                    serviceEndpoints: [{ service: "Microsoft.Storage" }]
                }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateServiceEndpointPolicy.json
 */
function createVirtualNetworkWithServiceEndpointsAndServiceEndpointPolicy() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "vnetTest";
        const virtualNetworkName = "vnet1";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            location: "eastus2euap",
            subnets: [
                {
                    name: "test-1",
                    addressPrefix: "10.0.0.0/16",
                    serviceEndpointPolicies: [
                        {
                            id: "/subscriptions/subid/resourceGroups/vnetTest/providers/Microsoft.Network/serviceEndpointPolicies/ServiceEndpointPolicy1"
                        }
                    ],
                    serviceEndpoints: [{ service: "Microsoft.Storage" }]
                }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateSubnet.json
 */
function createVirtualNetworkWithSubnet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const virtualNetworkName = "test-vnet";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            location: "eastus",
            subnets: [{ name: "test-1", addressPrefix: "10.0.0.0/24" }]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a virtual network in the specified resource group.
 *
 * @summary Creates or updates a virtual network in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/VirtualNetworkCreateSubnetWithAddressPrefixes.json
 */
function createVirtualNetworkWithSubnetContainingAddressPrefixes() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const virtualNetworkName = "test-vnet";
        const parameters = {
            addressSpace: { addressPrefixes: ["10.0.0.0/16"] },
            location: "eastus",
            subnets: [
                { name: "test-2", addressPrefixes: ["10.0.0.0/28", "10.0.1.0/28"] }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createVirtualNetwork();
        createVirtualNetworkWithBgpCommunities();
        createVirtualNetworkWithDelegatedSubnets();
        createVirtualNetworkWithEncryption();
        createVirtualNetworkWithServiceEndpoints();
        createVirtualNetworkWithServiceEndpointsAndServiceEndpointPolicy();
        createVirtualNetworkWithSubnet();
        createVirtualNetworkWithSubnetContainingAddressPrefixes();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualNetworksCreateOrUpdateSample.js.map