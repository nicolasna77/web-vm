/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { NetworkManagementClient } from "@azure/arm-network";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates an private endpoint in the specified resource group.
 *
 * @summary Creates or updates an private endpoint in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/PrivateEndpointCreate.json
 */
function createPrivateEndpoint() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const privateEndpointName = "testPe";
        const parameters = {
            customNetworkInterfaceName: "testPeNic",
            ipConfigurations: [
                {
                    name: "pestaticconfig",
                    groupId: "file",
                    memberName: "file",
                    privateIPAddress: "192.168.0.6"
                }
            ],
            location: "eastus2euap",
            privateLinkServiceConnections: [
                {
                    groupIds: ["groupIdFromResource"],
                    privateLinkServiceId: "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
                    requestMessage: "Please approve my connection."
                }
            ],
            subnet: {
                id: "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.privateEndpoints.beginCreateOrUpdateAndWait(resourceGroupName, privateEndpointName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an private endpoint in the specified resource group.
 *
 * @summary Creates or updates an private endpoint in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/PrivateEndpointCreateWithASG.json
 */
function createPrivateEndpointWithApplicationSecurityGroups() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const privateEndpointName = "testPe";
        const parameters = {
            applicationSecurityGroups: [
                {
                    id: "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/applicationSecurityGroup/asg1"
                }
            ],
            location: "eastus2euap",
            privateLinkServiceConnections: [
                {
                    groupIds: ["groupIdFromResource"],
                    privateLinkServiceId: "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
                    requestMessage: "Please approve my connection."
                }
            ],
            subnet: {
                id: "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.privateEndpoints.beginCreateOrUpdateAndWait(resourceGroupName, privateEndpointName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an private endpoint in the specified resource group.
 *
 * @summary Creates or updates an private endpoint in the specified resource group.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/PrivateEndpointCreateForManualApproval.json
 */
function createPrivateEndpointWithManualApprovalConnection() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subId";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const privateEndpointName = "testPe";
        const parameters = {
            customNetworkInterfaceName: "testPeNic",
            ipConfigurations: [
                {
                    name: "pestaticconfig",
                    groupId: "file",
                    memberName: "file",
                    privateIPAddress: "192.168.0.5"
                }
            ],
            location: "eastus",
            manualPrivateLinkServiceConnections: [
                {
                    groupIds: ["groupIdFromResource"],
                    privateLinkServiceId: "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
                    requestMessage: "Please manually approve my connection."
                }
            ],
            subnet: {
                id: "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.privateEndpoints.beginCreateOrUpdateAndWait(resourceGroupName, privateEndpointName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createPrivateEndpoint();
        createPrivateEndpointWithApplicationSecurityGroups();
        createPrivateEndpointWithManualApprovalConnection();
    });
}
main().catch(console.error);
//# sourceMappingURL=privateEndpointsCreateOrUpdateSample.js.map