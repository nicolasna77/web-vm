/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { NetworkManagementClient } from "@azure/arm-network";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or update a connection monitor.
 *
 * @summary Create or update a connection monitor.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/NetworkWatcherConnectionMonitorCreate.json
 */
function createConnectionMonitorV1() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const networkWatcherName = "nw1";
        const connectionMonitorName = "cm1";
        const parameters = {
            endpoints: [
                {
                    name: "source",
                    resourceId: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/ct1"
                },
                { name: "destination", address: "bing.com" }
            ],
            location: "eastus",
            testConfigurations: [
                {
                    name: "tcp",
                    tcpConfiguration: { port: 80 },
                    testFrequencySec: 60,
                    protocol: "Tcp"
                }
            ],
            testGroups: [
                {
                    name: "tg",
                    destinations: ["destination"],
                    sources: ["source"],
                    testConfigurations: ["tcp"]
                }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.connectionMonitors.beginCreateOrUpdateAndWait(resourceGroupName, networkWatcherName, connectionMonitorName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or update a connection monitor.
 *
 * @summary Create or update a connection monitor.
 * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-09-01/examples/NetworkWatcherConnectionMonitorV2Create.json
 */
function createConnectionMonitorV2() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["NETWORK_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["NETWORK_RESOURCE_GROUP"] || "rg1";
        const networkWatcherName = "nw1";
        const connectionMonitorName = "cm1";
        const parameters = {
            endpoints: [
                {
                    name: "vm1",
                    resourceId: "/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/NwRgIrinaCentralUSEUAP/providers/Microsoft.Compute/virtualMachines/vm1"
                },
                {
                    name: "CanaryWorkspaceVamshi",
                    filter: {
                        type: "Include",
                        items: [{ type: "AgentAddress", address: "npmuser" }]
                    },
                    resourceId: "/subscriptions/96e68903-0a56-4819-9987-8d08ad6a1f99/resourceGroups/vasamudrRG/providers/Microsoft.OperationalInsights/workspaces/vasamudrWorkspace"
                },
                { name: "bing", address: "bing.com" },
                { name: "google", address: "google.com" }
            ],
            outputs: [],
            testConfigurations: [
                {
                    name: "testConfig1",
                    tcpConfiguration: { disableTraceRoute: false, port: 80 },
                    testFrequencySec: 60,
                    protocol: "Tcp"
                }
            ],
            testGroups: [
                {
                    name: "test1",
                    destinations: ["bing", "google"],
                    disable: false,
                    sources: ["vm1", "CanaryWorkspaceVamshi"],
                    testConfigurations: ["testConfig1"]
                }
            ]
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = yield client.connectionMonitors.beginCreateOrUpdateAndWait(resourceGroupName, networkWatcherName, connectionMonitorName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createConnectionMonitorV1();
        createConnectionMonitorV2();
    });
}
main().catch(console.error);
//# sourceMappingURL=connectionMonitorsCreateOrUpdateSample.js.map