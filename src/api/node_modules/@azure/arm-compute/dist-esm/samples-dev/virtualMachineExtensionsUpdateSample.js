/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to The operation to update the extension.
 *
 * @summary The operation to update the extension.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-11-01/examples/virtualMachineExamples/VirtualMachineExtensions_Update.json
 */
function updateVMExtension() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "myResourceGroup";
        const vmName = "myVM";
        const vmExtensionName = "myVMExtension";
        const extensionParameters = {
            type: "extType",
            autoUpgradeMinorVersion: true,
            protectedSettingsFromKeyVault: {
                secretUrl: "https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e",
                sourceVault: {
                    id: "/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName"
                }
            },
            publisher: "extPublisher",
            settings: { UserName: "xyz@microsoft.com" },
            suppressFailures: true,
            typeHandlerVersion: "1.2"
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachineExtensions.beginUpdateAndWait(resourceGroupName, vmName, vmExtensionName, extensionParameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        updateVMExtension();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualMachineExtensionsUpdateSample.js.map