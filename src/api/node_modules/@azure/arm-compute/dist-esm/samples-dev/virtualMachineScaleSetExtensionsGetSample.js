/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to The operation to get the extension.
 *
 * @summary The operation to get the extension.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-11-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtensions_Get_MaximumSet_Gen.json
 */
function virtualMachineScaleSetExtensionsGetMaximumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "rgcompute";
        const vmScaleSetName = "aaaaaaaaaaaaaaaaaaaaaaaa";
        const vmssExtensionName = "aaaaaaaaaaaaaaaaaaaa";
        const expand = "aaaaaaa";
        const options = { expand };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachineScaleSetExtensions.get(resourceGroupName, vmScaleSetName, vmssExtensionName, options);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to The operation to get the extension.
 *
 * @summary The operation to get the extension.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-11-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSetExtensions_Get_MinimumSet_Gen.json
 */
function virtualMachineScaleSetExtensionsGetMinimumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "rgcompute";
        const vmScaleSetName = "a";
        const vmssExtensionName = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachineScaleSetExtensions.get(resourceGroupName, vmScaleSetName, vmssExtensionName);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        virtualMachineScaleSetExtensionsGetMaximumSetGen();
        virtualMachineScaleSetExtensionsGetMinimumSetGen();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualMachineScaleSetExtensionsGetSample.js.map